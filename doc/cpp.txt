*cpp.txt*


                             C++ Reference Manual

==============================================================================

Erase-remove idiom                            *erase-remove* ~

The std::remove algorithm does not eliminate elements from a container; it
simply moves the elements not being removed to the front of the container,
leaving the contents at the end of the container undefined. This is because
std::remove works only using a pair of forward iterators, and the generic
concept of forward iterators does not know how to eliminate data elements from
an arbitrary data structure. Only container member functions can eliminate
container elements, as only members know the details of the internal data
structure. The Erase-Remove idiom is used to remove and eliminate data
elements from a container.

>
    std::vector<int> v{1, 2, 3, 4, 5, 6, 7, 8};

    auto isOdd = [](int x) { return a % 2 == 1; };
    v.erase(std::remove_if(v.begin(), v.end(), isOdd), v.end());
<
|C++20| adds std::erase and std::erase_if which accomplish the same goal.

>
    std::erase_if(v.begin(), v.end(), isOdd);
<
https://en.wikibooks.org/wiki/More_C++_Idioms/Erase-Remove
https://en.cppreference.com/w/cpp/container/vector/erase2


Copy and swap idiom                           *copy-and-swap* ~

Reference: https://stackoverflow.com/a/3279550/3033441

Any class that manages a resource (a wrapper, like smart pointer) needs to
follow the |rule-of-five|. The copy-and-swap idiom helps in avoiding code
duplication and providing a |strong-exception-guarantee| when implementing
those functions.

>
    class array_wrapper
    {
      public:
        array_wrapper(size_t size = 0)
          : m_size(size)
          , m_array(m_size ? calloc(m_size, sizeof(int)) : nullptr)
        {
        }

        ~array_wrapper()
        {
          if (m_size)
          {
            free(m_array);
          }
        }

        // copy constructor
        array_wrapper(const array_wrapper& other)
          : array_wrapper(other.m_size)
        {
          std::copy_n(other.m_array, other.m_size, m_array);
        }

        // move construction using swap
        array_wrapper(array_wrapper&& other) noexcept
          : array_wrapper()
        {
          swap(*this, other);
        }

        // copy and move assignment operator using swap
        array_wrapper& operator=(array_wrapper other) // notice pass-by-value
        {
          swap(*this, other);
          return *this;
        }

        friend void swap(array_wrapper& a, array_wrapper& b) noexcept
        {
          using std::swap; // enable ADL
          swap(a.m_size, b.m_size);
          swap(a.m_array, b.m_array);
        }

      private:
        size_t m_size;
        int* m_array;
    };
<

Rule of three                                 *rule-of-three* ~

Rule of five                                  *rule-of-five* ~

Strong exception guarantee                    *strong-exception-guarantee* ~

C++14                                         *C++14* ~

C++17                                         *C++17* ~

C++20                                         *C++20* ~

- std::erase, std::erase_if to replace the erase-remove idiom

GCC Builtins                                  *builtin* *builtins* ~

bool *__builtin_types_compatible_p* (type1, type2)

type *__builtin_choose_expr* (const_exp, exp1, exp2)

bool *__builtin_constant_p* (exp)

void *__builtin_prefetch* (const void *addr, ...)

long *__builtin_expect* (long exp, long c)

Branch prediction hint.

void *__builtin_unreachable* (void)

int *__builtin_clz* (unsigned int x)
int *__builtin_clzl* (unsigned long)
int *__builtin_clzll* (unsigned long long)

Returns the number of leading 0-bits in x, starting at the most
significant bit position. If x is 0, the result is undefined.

int *__builtin_ctz* (unsigned int x)
int *__builtin_ctzl* (unsigned long)
int *__builtin_ctzll* (unsigned long long)

Returns the number of trailing 0-bits in x, starting at the
least significant bit position. If x is 0, the result is undefined.

int *__builtin_clrsb* (int x)
int *__builtin_clrsbl* (long)
int *__builtin_clrsbll* (long long)

Returns the number of leading redundant sign bits in x, i.e. the
number of bits following the most significant bit that are identical
to it. There are no special cases for 0 or other values.

int *__builtin_ffs* (unsigned int x)
int *__builtin_ffsl* (unsigned long)
int *__builtin_ffsll* (unsigned long long)

Returns one plus the index of the least significant 1-bit of x,
or if x is zero, returns zero.

int *__builtin_parity* (unsigned int x)
int *__builtin_parityl* (unsigned long)
int *__builtin_parityll* (unsigned long long)

Returns the parity of x, i.e. the number of 1-bits in x modulo 2.

int *__builtin_popcount* (unsigned int x)
int *__builtin_popcountl* (unsigned long)
int *__builtin_popcountll* (unsigned long long)

Returns the number of 1-bits in x.

type *__builtin_stdc_bit_ceil* (type arg)
type *__builtin_stdc_bit_floor* (type arg)
unsigned int *__builtin_stdc_bit_width* (type arg)
unsigned int *__builtin_stdc_count_ones* (type arg)
unsigned int *__builtin_stdc_count_zeros* (type arg)
unsigned int *__builtin_stdc_first_leading_one* (type arg)
unsigned int *__builtin_stdc_first_leading_zero* (type arg)
unsigned int *__builtin_stdc_first_trailing_one* (type arg)
unsigned int *__builtin_stdc_first_trailing_zero* (type arg)
unsigned int *__builtin_stdc_has_single_bit* (type arg)
unsigned int *__builtin_stdc_leading_ones* (type arg)
unsigned int *__builtin_stdc_leading_zeros* (type arg)
unsigned int *__builtin_stdc_trailing_ones* (type arg)
unsigned int *__builtin_stdc_trailing_zeros* (type arg)

double *__builtin_powi* (double, int)
float *__builtin_powif* (float, int)
long double *__builtin_powil* (long double, int)

Returns the first argument raised to the power of the second. Unlike
the pow function no guarantees about precision and rounding are made.

uint16_t *__builtin_bswap16* (uint16_t x)
uint32_t *__builtin_bswap32* (uint32_t x)
uint64_t *__builtin_bswap64* (uint64_t x)
uint128_t *__builtin_bswap128* (uint128_t x)

Returns x with the order of the bytes reversed; for example, 0xaabb
becomes 0xbbaa. Byte here always means exactly 8 bits.

Retrieved from GCC documentation on 2024-06-19
https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html

vim:tw=78:ts=8:noet:ft=help:norl:
